# SPDX-License-Identifier: Apache-2.0

[tox]
# py3-unit runs unit tests with 'python3'
# py311-unit runs the same tests with 'python3.11'
envlist = ruff, lint, mypy, py3-unit, py3-integration
minversion = 4.4

[testenv]
description = run tests (unit, unitcov)
# Use PyTorch CPU build instead of CUDA build in test envs. CUDA dependencies
# are huge. This reduces venv from 5.7 GB to 1.5 GB.
setenv =
    PIP_EXTRA_INDEX_URL=https://download.pytorch.org/whl/cpu
package = wheel
wheel_build_env = pkg
deps =
    .[dev]
commands =
    unit: {envpython} -m pytest {posargs:tests/blocks tests/flow tests/utils -m "not (examples or slow)"}
    unitcov: {envpython} -W error::UserWarning -m pytest --cov=sdg_hub --cov-report term --cov-report=html:coverage-{env_name} --cov-report=xml:coverage-{env_name}.xml --html=durations/{env_name}.html {posargs:tests/blocks tests/flow tests/utils -m "not (examples or slow)"}
    integration: {envpython} -m pytest {posargs:tests/integration}

# Integration test environment - runs notebook-based integration tests
[testenv:py3-integration]
description = run integration tests (notebooks)
package = wheel
wheel_build_env = pkg
passenv =
    OPENAI_API_KEY
deps =
    .[dev]
    .[examples]
commands =
    {envpython} -m pytest {posargs:tests/integration -v -s}

# Integration test environment with coverage - runs notebook-based integration tests with coverage collection
[testenv:py3-integrationcov]
description = run integration tests (notebooks) with coverage
package = wheel
wheel_build_env = pkg
passenv =
    OPENAI_API_KEY
deps =
    .[dev]
    .[examples]
commands =
    {envpython} -m pytest --cov=sdg_hub --cov-report term --cov-report=html:coverage-{env_name} --cov-report=xml:coverage-{env_name}.xml --html=durations/{env_name}.html tests/integration {posargs:-v -s}

# format, check, and linting targets don't build and install the project to
# speed up testing.
[testenv:lint]
description = lint with pylint
skip_install = true
skipsdist = true
deps =
    .[dev]
commands =
    {envpython} -m pylint --load-plugins pylint_pydantic src/sdg_hub/

[testenv:fastlint]
description = fast lint with pylint (without 3rd party modules)
skip_install = true
skipsdist = true
deps =
    pylint
    pylint-pydantic
commands =
    {envpython} -m pylint --load-plugins pylint_pydantic {posargs:--disable=import-error src/sdg_hub/}

[testenv:ruff]
description = reformat and fix code with Ruff
skip_install = True
skipsdist = true
# keep in sync with .pre-commit-config.yaml
deps =
    ruff==0.3.4
# supports 'fix', 'check', or abitrary args to 'ruff' command
commands =
    ./scripts/ruff.sh {posargs:fix}
allowlist_externals = ./scripts/ruff.sh

[testenv:mypy]
description = Python type checking with mypy
deps =
  mypy>=1.10.0,<2.0
  types-tqdm
  types-PyYAML
  pytest
commands =
  mypy src


[gh]
python =
    3.11 = py311-unitcov
    3.10 = py310-unitcov
